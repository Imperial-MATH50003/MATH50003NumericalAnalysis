# Integers


In this section we discuss the following:

1. Unsigned integers: how computers represent non-negative integers using only $p$-bits, via [modular arithmetic](https://en.wikipedia.org/wiki/Modular_arithmetic).
2. Signed integers: how negative integers are handled using the [Two's-complement](https://en.wikipedia.org/wiki/Two's_complement) format.



Mathematically, CPUs only act on $p$-bits at a time, with $2^p$ possible sequences.
That is, essentially all functions $f$ are either of the form
$f : ℤ_{2^p} → ℤ_{2^p}$ or  $f : ℤ_{2^p} × ℤ_{2^p} → ℤ_{2^p}$,
where we use the following notation:

**Definition (finite integers)** Denote the set of the first $m$ non-negative integers as $ℤ_m := \{0 , 1 , …, m-1 \}$.
∎

To translate between integers and bits we will need to write integers in binary format. 
That is, as sequence of `0`s and `1`s:

**Definition (binary format)**
For $B_0,\ldots,B_p \in \{0,1\}$ denote an integer in _binary format_ by:
$$
±(B_p\ldots B_1B_0)_2 := ±\sum_{k=0}^p B_k 2^k
$$
∎


**Example (integers in binary)**
A simple integer example is $5 = 2^2 + 2^0 = (101)_2$.
On the other hand, we write $-5 = -(101)_2$.
Another example is $258 = 2^8 + 2 = (100000010)_2$.
∎


## Unsigned Integers


Computers represent integers by a finite number of $p$-bits,
with $2^p$ possible combinations of 0s and 1s. Denote these $p$-bits as $B_{p-1}…B_1B_0$ where $B_k ∈ \{0,1\}$.
For _unsigned integers_ (non-negative integers) these bits dictate the first $p$ binary digits: $(B_{p-1}\ldots B_1B_0)_2$.
Integers represented with $p$-bits on a computer are interpreted as 
representing elements of ${\mathbb Z}_{2^p}$ and integer arithmetic on a computer is
equivalent to arithmetic modulo $2^p$. We denote modular arithmetic with $m = 2^p$ as follows:
$$
\begin{align*}
x ⊕_m y &:= (x+y)\ ({\rm mod}\ m) \\
x ⊖_m y &:= (x-y)\ ({\rm mod}\ m) \\
x ⊗_m y &:= (x*y)\ ({\rm mod}\ m)
\end{align*}
$$
When $m$ is implied by context we just write $⊕, ⊖, ⊗$. Note that  the $({\rm mod}\ m)$ function simply
drops all bits except for the first $p$-bits when writing a number in binary.

**Example (arithmetic with  8-bit unsigned integers)**
If  the result of an operation lies between $0$ and $m = 2^8 = 256$ then airthmetic works exactly like
standard integer arithmetic.
For example,
$$
\begin{align*}
17 ⊕_{256} 3 = 20\ ({\rm mod}\ 256) = 20 \\
17 ⊖_{256} 3 = 14\ ({\rm mod}\ 256) = 14
\end{align*}
$$
∎

**Example (overflow with 8-bit unsigned integers)** If we go beyond the range
the result “wraps around". For example, with true integers we have
$$
255 + 1 = (11111111)_2 + (00000001)_2 = (100000000)_2 = 256
$$
However, the result is impossible to store in just 8-bits!
So as mentioned instead it treats the integers as elements of ${\mathbb Z}_{256}$
by dropping any extra digits:
$$
255 ⊕_{256} 1 = 255 + 1 \ ({\rm mod}\ 256) = (100000000)_2 \ ({\rm mod}\ 256) = 0.
$$
On the other hand, if we go below $0$ we wrap around from above:
$$
3 ⊖_{256} 5 = -2\ ({\rm mod}\ 256) = 254 = (11111110)_2
$$
∎

**Example (multiplication of 8-bit unsigned integers)**
Multiplication works similarly: for example,
$$
254 ⊗_{256} 2 = 254 * 2 \ ({\rm mod}\ 256) = (11111110)_2 * 2  \ ({\rm mod}\ 256)
= (111111100)_2  \ ({\rm mod}\ 256) = 252.
$$
Note that multiplication by $2$ is the same as shifting the binary digits left by one,
just as multiplication by $10$ shifts base-10 digits left by 1.
∎

## Signed integer

Signed integers use the [Two's complemement](https://epubs.siam.org/doi/abs/10.1137/1.9780898718072.ch3)
convention. The convention is if the first bit is 1 then the number is negative: in this case
if the bits had represented the unsigned integer $2^p - y$ then the represent the signed
integer $-y$.
Thus for $p = 8$ we are interpreting
$2^7$ through $2^8-1$ as negative numbers. More precisely:

**Definition (signed integers)** Denote the finite signed integers as
$$
ℤ_{2^p}^{\rm s} := \{-2^{p-1} ,…, -1 ,0,1, …, 2^{p-1}-1\}.
$$
∎

**Definition (Shifted mod)**
Define for $y = x\ ({\rm mod}\ 2^p)$
$$
x\ ({\rm mod}^{\rm s}\ 2^p) := \begin{cases} y & 0 ≤ y ≤ 2^{p-1}-1 \\
                             y - 2^p & 2^{p-1} ≤ y ≤ 2^p - 1
                             \end{cases}
$$
∎

Note that if $R_p(x) = x\ ({\rm mod}^{\rm s}\ 2^p)$ then it can be viewed as a map
$R_p : ℤ → ℤ_{2^p}^{\rm s}$ or a one-to-one map
$R_p : ℤ_{2^p} → ℤ_{2^p}^{\rm s}$ whose inverse is $R_p^{-1}(x) = x\ ({\rm mod}\ 2^p)$. It can also be
viewed as the identity map on signed integers $R_p : ℤ_{2^p}^{\rm s} → ℤ_{2^p}^{\rm s}$, that is, 
$R_p(x) = x$ if $x \in ℤ_{2^p}^{\rm s}$.


Arithmetic works precisely
the same for signed and unsigned integers up to the mapping $R_p$, e.g. we have for $m = 2^p$
$$
\begin{align*}
x ⊕_{m}^{\rm s} y &:= (x+y)\ ({\rm mod}^{\rm s}\ m) \\
x ⊖_{m}^{\rm s} y &:= (x-y)\ ({\rm mod}^{\rm s}\ m) \\
x ⊗_{m}^{\rm s} y &:= (x*y)\ ({\rm mod}^{\rm s}\ m)
\end{align*}
$$

**Example (addition of 8-bit signed integers)**
Consider `(-1) + 1` in 8-bit arithmetic:
$$
-1 ⊕_{256}^{\rm s} 1 = -1 + 1 \ ({\rm mod}^{\rm s}\ 256) = 0
$$
On the bit level this computation is exactly the same as unsigned integers. We represent the
number $-1$ using the same bits as the unsigned integer $2^8 - 1 = 255$, that is
 using the bits `11111111` (i.e., we store it equivalently to  $(11111111)_2 = 255$) and the 
number $1$ is stored using the bits `00000001`. When we add this with true integer arithmetic we have
$$
\begin{align*}
(0 11111111)_2 &\ + \\
(0 00000001)_2 &\ = \\
(1 00000000)_2&
\end{align*}
$$
Modular arithmetic drops the leading $1$ and we are left with all zeros.
∎

**Example (signed overflow with 8-bit signed integers)**
If we go above $2^{p-1}-1 = 2^7 - 1 = 127$  we have perhaps unexpected results:
$$
127 ⊕_{256}^{\rm s} 1 = 128\  ({\rm mod}^{\rm s}\ 256) = 128 - 256 = -128.
$$
Again on the bit level this computation is exactly the same as unsigned integers. We represent the
number $127$ using the bits `01111111` and the 
number $1$ is stored using the bits `00000001`. When we add this with true integer arithmetic we have
$$
\begin{align*}
(01111111)_2 &\ + \\
(00000001)_2 &\ = \\
(10000000)_2&
\end{align*}
$$
Because the first bit is `1` we interpret this as a negative number using the formula:
$$
(10000000)_2\ ({\rm mod}^{\rm s}\ 256) = 128   ({\rm mod}^{\rm s}\ 256) = -128.
$$
∎

**Example (multiplication of 8-bit signed integers)**
Consider computation of `(-2) * 2`:
$$
(-2) ⊗_{2^p}^{\rm s} 2 = -4 \ ({\rm mod}^{\rm s}\ 2^p) = -4
$$
On the bit level, the bits of $-2$ (which is one less than $-1$) are `11111110`. Multiplying by 2 is like multiplying
by 10 in base-10, that is, we shift the bits. Hence in true arithmetic we have
$$
\begin{align*}
(0 11111110)_2 & * 2 = \\
(1 11111100)_2&
\end{align*}
$$
We drop the leading 1 due to modular arithmetic. We still have a leading $1$ hence the number
is viewed as negative. In particular we have
$$
\meeq{
(1 11111100)_2 \ ({\rm mod}^{\rm s}\ 256) = (11111100)_2 \ ({\rm mod}^{\rm s}\ 256) = 
2^7+2^6+2^5+2^4+2^3+2^2 \ ({\rm mod}^{\rm s}\ 256) \ccr
 = 252  \ ({\rm mod}^{\rm s}\ 256) = -4.
}
$$
∎

## Hexadecimal format

In coding it is often convenient to use base-16 as it is a power of $2$ but uses less
characters than binary. The digits used are $0$ through $9$
followed by $a = 10$, $b = 11$, $c = 12$, $d = 13$, $e = 14$, and $f = 15$. 

**Example (Hexadecimal number)**
We can interpret a number in format as follows:
$$
(a5f2)_{16} = a*16^3 + 5*16^2 + f*16 + 2 = 
10*16^3 + 5*16^2 + 15*16 + 2 = 42,482
$$
∎

We will see in the labs that unsigned integers are displayed in base-16.